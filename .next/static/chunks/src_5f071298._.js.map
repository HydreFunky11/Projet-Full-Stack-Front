{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/remyb/Documents/cours/dev%20web%20full%20stack/final%20project/Projet-Full-Stack-Front/src/services/api/sessionService.ts"],"sourcesContent":["import { apiRequest } from './apiClient';\r\nimport { User } from './authService';\r\n\r\nexport interface Session {\r\n  id: number;\r\n  title: string;\r\n  description: string | null;\r\n  scheduledAt: string | null;\r\n  status: string;\r\n  gmId: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  gm: {\r\n    id: number;\r\n    username: string;\r\n  };\r\n  participants: {\r\n    id: number;\r\n    userId: number;\r\n    role: string;\r\n    user: {\r\n      username: string;\r\n    };\r\n  }[];\r\n  _count: {\r\n    characters: number;\r\n    diceRolls: number;\r\n  };\r\n}\r\n\r\nexport interface SessionsResponse {\r\n  success: boolean;\r\n  count: number;\r\n  sessions: Session[];\r\n}\r\n\r\nexport interface SessionResponse {\r\n  success: boolean;\r\n  session: Session;\r\n}\r\n\r\nexport const sessionService = {\r\n  getSessions: async (\r\n    filters?: { status?: string; gmId?: number; title?: string }\r\n  ): Promise<SessionsResponse> => {\r\n    let queryParams = '';\r\n    if (filters) {\r\n      const params = new URLSearchParams();\r\n      if (filters.status) params.append('status', filters.status);\r\n      if (filters.gmId) params.append('gmId', filters.gmId.toString());\r\n      if (filters.title) params.append('title', filters.title);\r\n      queryParams = `?${params.toString()}`;\r\n    }\r\n    return apiRequest<SessionsResponse>(`/sessions${queryParams}`);\r\n  },\r\n\r\n  getSessionById: async (id: number): Promise<SessionResponse> => {\r\n    return apiRequest<SessionResponse>(`/sessions/${id}`);\r\n  },\r\n\r\n  createSession: async (sessionData: {\r\n    title: string;\r\n    description?: string;\r\n    scheduledAt?: string;\r\n    status?: string;\r\n  }): Promise<SessionResponse> => {\r\n    return apiRequest<SessionResponse>('/sessions', {\r\n      method: 'POST',\r\n      body: sessionData,\r\n    });\r\n  },\r\n\r\n  updateSession: async (\r\n    id: number,\r\n    sessionData: {\r\n      title?: string;\r\n      description?: string;\r\n      scheduledAt?: string;\r\n      status?: string;\r\n    }\r\n  ): Promise<SessionResponse> => {\r\n    return apiRequest<SessionResponse>(`/sessions/${id}`, {\r\n      method: 'PUT',\r\n      body: sessionData,\r\n    });\r\n  },\r\n\r\n  deleteSession: async (id: number): Promise<{ success: boolean; message: string }> => {\r\n    return apiRequest<{ success: boolean; message: string }>(`/sessions/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  },\r\n};"],"names":[],"mappings":";;;AAAA;;AAyCO,MAAM,iBAAiB;IAC5B,aAAa,OACX;QAEA,IAAI,cAAc;QAClB,IAAI,SAAS;YACX,MAAM,SAAS,IAAI;YACnB,IAAI,QAAQ,MAAM,EAAE,OAAO,MAAM,CAAC,UAAU,QAAQ,MAAM;YAC1D,IAAI,QAAQ,IAAI,EAAE,OAAO,MAAM,CAAC,QAAQ,QAAQ,IAAI,CAAC,QAAQ;YAC7D,IAAI,QAAQ,KAAK,EAAE,OAAO,MAAM,CAAC,SAAS,QAAQ,KAAK;YACvD,cAAc,CAAC,CAAC,EAAE,OAAO,QAAQ,IAAI;QACvC;QACA,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAoB,CAAC,SAAS,EAAE,aAAa;IAC/D;IAEA,gBAAgB,OAAO;QACrB,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAmB,CAAC,UAAU,EAAE,IAAI;IACtD;IAEA,eAAe,OAAO;QAMpB,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAmB,aAAa;YAC9C,QAAQ;YACR,MAAM;QACR;IACF;IAEA,eAAe,OACb,IACA;QAOA,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAmB,CAAC,UAAU,EAAE,IAAI,EAAE;YACpD,QAAQ;YACR,MAAM;QACR;IACF;IAEA,eAAe,OAAO;QACpB,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAyC,CAAC,UAAU,EAAE,IAAI,EAAE;YAC1E,QAAQ;QACV;IACF;AACF","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/remyb/Documents/cours/dev%20web%20full%20stack/final%20project/Projet-Full-Stack-Front/src/services/api/characterService.ts"],"sourcesContent":["import { apiRequest } from './apiClient';\r\n\r\nexport interface Character {\r\n  id: number;\r\n  name: string;\r\n  race: string;\r\n  class: string;\r\n  level: number;\r\n  background?: string;\r\n  inventory?: string;\r\n  stats?: any;\r\n  isAlive: boolean;\r\n  userId: number;\r\n  sessionId?: number | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  session?: {\r\n    id: number;\r\n    title: string;\r\n    status: string;\r\n  } | null;\r\n}\r\n\r\nexport interface CharactersResponse {\r\n  success: boolean;\r\n  characters: Character[];\r\n}\r\n\r\nexport interface CharacterResponse {\r\n  success: boolean;\r\n  character: Character;\r\n}\r\n\r\nexport const characterService = {\r\n  getCharacters: async (userId?: number): Promise<CharactersResponse> => {\r\n    const queryParams = userId ? `?userId=${userId}` : '';\r\n    return apiRequest<CharactersResponse>(`/characters${queryParams}`);\r\n  },\r\n\r\n  getCharacterById: async (id: number): Promise<CharacterResponse> => {\r\n    return apiRequest<CharacterResponse>(`/characters/${id}`);\r\n  },\r\n\r\n  createCharacter: async (characterData: {\r\n    name: string;\r\n    race: string;\r\n    class: string;\r\n    level: number;\r\n    background?: string;\r\n    inventory?: string;\r\n    stats?: any;\r\n  }): Promise<CharacterResponse> => {\r\n    return apiRequest<CharacterResponse>('/characters', {\r\n      method: 'POST',\r\n      body: characterData,\r\n    });\r\n  },\r\n\r\n  updateCharacter: async (\r\n    id: number,\r\n    characterData: {\r\n      name?: string;\r\n      race?: string;\r\n      class?: string;\r\n      level?: number;\r\n      background?: string;\r\n      inventory?: string;\r\n      stats?: any;\r\n      isAlive?: boolean;\r\n      sessionId?: number | null;\r\n    }\r\n  ): Promise<CharacterResponse> => {\r\n    return apiRequest<CharacterResponse>(`/characters/${id}`, {\r\n      method: 'PUT',\r\n      body: characterData,\r\n    });\r\n  },\r\n\r\n  deleteCharacter: async (id: number): Promise<{ success: boolean; message: string }> => {\r\n    return apiRequest<{ success: boolean; message: string }>(`/characters/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  },\r\n\r\n  getSessionCharacters: async (sessionId: number): Promise<CharactersResponse> => {\r\n    return apiRequest<CharactersResponse>(`/characters/session/${sessionId}`);\r\n  },\r\n\r\n  associateWithSession: async (\r\n    characterId: number,\r\n    sessionId: number | null\r\n  ): Promise<CharacterResponse> => {\r\n    return apiRequest<CharacterResponse>(`/characters/${characterId}/assign-session`, {\r\n      method: 'PUT',\r\n      body: { sessionId },\r\n    });\r\n  },\r\n};"],"names":[],"mappings":";;;AAAA;;AAiCO,MAAM,mBAAmB;IAC9B,eAAe,OAAO;QACpB,MAAM,cAAc,SAAS,CAAC,QAAQ,EAAE,QAAQ,GAAG;QACnD,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAsB,CAAC,WAAW,EAAE,aAAa;IACnE;IAEA,kBAAkB,OAAO;QACvB,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAqB,CAAC,YAAY,EAAE,IAAI;IAC1D;IAEA,iBAAiB,OAAO;QAStB,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAqB,eAAe;YAClD,QAAQ;YACR,MAAM;QACR;IACF;IAEA,iBAAiB,OACf,IACA;QAYA,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAqB,CAAC,YAAY,EAAE,IAAI,EAAE;YACxD,QAAQ;YACR,MAAM;QACR;IACF;IAEA,iBAAiB,OAAO;QACtB,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAyC,CAAC,YAAY,EAAE,IAAI,EAAE;YAC5E,QAAQ;QACV;IACF;IAEA,sBAAsB,OAAO;QAC3B,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAsB,CAAC,oBAAoB,EAAE,WAAW;IAC1E;IAEA,sBAAsB,OACpB,aACA;QAEA,OAAO,CAAA,GAAA,sIAAA,CAAA,aAAU,AAAD,EAAqB,CAAC,YAAY,EAAE,YAAY,eAAe,CAAC,EAAE;YAChF,QAAQ;YACR,MAAM;gBAAE;YAAU;QACpB;IACF;AACF","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/remyb/Documents/cours/dev%20web%20full%20stack/final%20project/Projet-Full-Stack-Front/src/app/dashboard/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useAuth } from '../../contexts/authContext';\r\nimport { sessionService, Session } from '../../services/api/sessionService';\r\nimport { characterService, Character } from '../../services/api/characterService';\r\nimport Link from 'next/link';\r\nimport styles from '../../styles/Dashboard.module.scss';\r\n\r\nexport default function Dashboard() {\r\n  const { user } = useAuth();\r\n  const [sessions, setSessions] = useState<Session[]>([]);\r\n  const [characters, setCharacters] = useState<Character[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Récupérer les sessions et personnages de l'utilisateur\r\n        const sessionsResponse = await sessionService.getSessions();\r\n        const charactersResponse = await characterService.getCharacters();\r\n        \r\n        setSessions(sessionsResponse.sessions.slice(0, 5)); // Afficher les 5 dernières sessions\r\n        setCharacters(charactersResponse.characters.slice(0, 5)); // Afficher les 5 derniers personnages\r\n      } catch (err) {\r\n        setError((err as Error).message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (user) {\r\n      fetchData();\r\n    }\r\n  }, [user]);\r\n\r\n  if (loading) {\r\n    return <div className={styles.loading}>Chargement...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className={styles.error}>Erreur: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.dashboard}>\r\n      <h1>Tableau de bord</h1>\r\n      <p className={styles.welcome}>Bienvenue, {user?.username}!</p>\r\n      \r\n      <div className={styles.dashboardGrid}>\r\n        <div className={styles.card}>\r\n          <h2>Vos dernières sessions</h2>\r\n          {sessions.length > 0 ? (\r\n            <ul className={styles.list}>\r\n              {sessions.map((session) => (\r\n                <li key={session.id} className={styles.listItem}>\r\n                  <Link href={`/sessions/${session.id}`} className={styles.link}>\r\n                    <span className={styles.title}>{session.title}</span>\r\n                    <span className={styles.status}>{session.status}</span>\r\n                  </Link>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>Vous n'avez pas encore de sessions.</p>\r\n          )}\r\n          <Link href=\"/sessions\" className={styles.viewAllLink}>\r\n            Voir toutes les sessions\r\n          </Link>\r\n        </div>\r\n        \r\n        <div className={styles.card}>\r\n          <h2>Vos personnages</h2>\r\n          {characters.length > 0 ? (\r\n            <ul className={styles.list}>\r\n              {characters.map((character) => (\r\n                <li key={character.id} className={styles.listItem}>\r\n                  <Link href={`/characters/${character.id}`} className={styles.link}>\r\n                    <span className={styles.title}>{character.name}</span>\r\n                    <span className={styles.subtitle}>\r\n                      {character.race} {character.class} (Niv. {character.level})\r\n                    </span>\r\n                  </Link>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>Vous n'avez pas encore de personnages.</p>\r\n          )}\r\n          <Link href=\"/characters\" className={styles.viewAllLink}>\r\n            Voir tous les personnages\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className={styles.actions}>\r\n        <Link href=\"/sessions/create\" className={styles.actionButton}>\r\n          Créer une session\r\n        </Link>\r\n        <Link href=\"/characters/create\" className={styles.actionButton}>\r\n          Créer un personnage\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}